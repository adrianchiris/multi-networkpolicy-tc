// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SriovnetProvider is an autogenerated mock type for the SriovnetProvider type
type SriovnetProvider struct {
	mock.Mock
}

// GetUplinkRepresentor provides a mock function with given fields: pciAddress
func (_m *SriovnetProvider) GetUplinkRepresentor(pciAddress string) (string, error) {
	ret := _m.Called(pciAddress)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pciAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pciAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVfIndexByPciAddress provides a mock function with given fields: vfPciAddress
func (_m *SriovnetProvider) GetVfIndexByPciAddress(vfPciAddress string) (int, error) {
	ret := _m.Called(vfPciAddress)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(vfPciAddress)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vfPciAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVfRepresentor provides a mock function with given fields: uplink, vfIndex
func (_m *SriovnetProvider) GetVfRepresentor(uplink string, vfIndex int) (string, error) {
	ret := _m.Called(uplink, vfIndex)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(uplink, vfIndex)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(uplink, vfIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSriovnetProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewSriovnetProvider creates a new instance of SriovnetProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSriovnetProvider(t mockConstructorTestingTNewSriovnetProvider) *SriovnetProvider {
	mock := &SriovnetProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
