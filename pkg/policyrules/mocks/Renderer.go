// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	controllers "github.com/k8snetworkplumbingwg/multi-networkpolicy-tc/pkg/controllers"
	mock "github.com/stretchr/testify/mock"

	policyrules "github.com/k8snetworkplumbingwg/multi-networkpolicy-tc/pkg/policyrules"
)

// Renderer is an autogenerated mock type for the Renderer type
type Renderer struct {
	mock.Mock
}

// RenderEgress provides a mock function with given fields: target, currentPolicies, currentPods, currentNamespaces
func (_m *Renderer) RenderEgress(target *controllers.PodInfo, currentPolicies controllers.PolicyMap, currentPods controllers.PodMap, currentNamespaces controllers.NamespaceMap) ([]policyrules.PolicyRuleSet, error) {
	ret := _m.Called(target, currentPolicies, currentPods, currentNamespaces)

	var r0 []policyrules.PolicyRuleSet
	if rf, ok := ret.Get(0).(func(*controllers.PodInfo, controllers.PolicyMap, controllers.PodMap, controllers.NamespaceMap) []policyrules.PolicyRuleSet); ok {
		r0 = rf(target, currentPolicies, currentPods, currentNamespaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]policyrules.PolicyRuleSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*controllers.PodInfo, controllers.PolicyMap, controllers.PodMap, controllers.NamespaceMap) error); ok {
		r1 = rf(target, currentPolicies, currentPods, currentNamespaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderIngress provides a mock function with given fields: target, currentPolicies, currentPods, currentNamespaces
func (_m *Renderer) RenderIngress(target *controllers.PodInfo, currentPolicies controllers.PolicyMap, currentPods controllers.PodMap, currentNamespaces controllers.NamespaceMap) ([]policyrules.PolicyRuleSet, error) {
	ret := _m.Called(target, currentPolicies, currentPods, currentNamespaces)

	var r0 []policyrules.PolicyRuleSet
	if rf, ok := ret.Get(0).(func(*controllers.PodInfo, controllers.PolicyMap, controllers.PodMap, controllers.NamespaceMap) []policyrules.PolicyRuleSet); ok {
		r0 = rf(target, currentPolicies, currentPods, currentNamespaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]policyrules.PolicyRuleSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*controllers.PodInfo, controllers.PolicyMap, controllers.PodMap, controllers.NamespaceMap) error); ok {
		r1 = rf(target, currentPolicies, currentPods, currentNamespaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRenderer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRenderer creates a new instance of Renderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRenderer(t mockConstructorTestingTNewRenderer) *Renderer {
	mock := &Renderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
